version: '3.9'

networks:
  app-tier:
    driver: bridge

services:
  zookeeper:
    image: 'bitnami/zookeeper:latest'
    container_name: zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - '2181:2181'
    networks:
      - app-tier
  kafka:
    image: 'bitnami/kafka:latest'
    container_name: kafka
    environment:
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_LISTENERS=PLAINTEXT://kafka:9092
    ports:
      - '9092:9092'
    networks:
      - app-tier
    depends_on:
      - zookeeper
    command: sh -c "((sleep 10 && kafka-topics.sh --create --bootstrap-server kafka:9092 --replication-factor 1 --partitions 2 --topic ventas && kafka-topics.sh --create --bootstrap-server kafka:9092 --replication-factor 1 --partitions 2 --topic stock && kafka-topics.sh --create --bootstrap-server kafka:9092 --replication-factor 1 --partitions 2 --topic coordenadas)&)&& /opt/bitnami/scripts/kafka/entrypoint.sh /run.sh"
  
  producer:
    container_name: producer
    build: ./Producer
    networks:
      - app-tier
    ports:
      - "8000:8000"
    depends_on:
      - kafka
      - zookeeper
  consumer:
    container_name: consumer
    build: ./Consumer
    networks:
      - app-tier
    ports:
      - "5000:5000"
    depends_on:
      - kafka
      - zookeeper
      - producer
  postgres:
    image: 'bitnami/postgresql:latest'
    container_name: postgres
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=tarea2
    ports:
      - "5432:5432"
    volumes:
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: always
    networks:
      - app-tier